
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Trung
 */
public class createNewSystem extends javax.swing.JFrame {
    File[] listofFiles;
    File[] _biFriends;
    String biFriendsFiles = "";
    String dictionary = "";
    String places = "";
    String organization = "";
    String name = "";
    String smd = "";
    String spamword = "";
    String fFeatureSelectionPath = "";
    Execution execution = new Execution();
    ArrayList featureNamesInContentBased = new ArrayList();
    ArrayList featureNamesInUserBased = new ArrayList();
    ArrayList arffFiles = new ArrayList();
    ArrayList evaluationMetric = new ArrayList();
    HashMap<String,Integer> newsystem = new HashMap();    
    HashMap<String,Integer> system1 = new HashMap();
    HashMap<String,Integer> system2 = new HashMap();
    HashMap<String,Integer> system3 = new HashMap(); 
    HashMap<String,Integer> system4 = new HashMap(); 
    HashMap<String,Integer> system5 = new HashMap();    
    HashMap<String, Integer> hm = new HashMap();
    HashMap<String, Integer> hmPlaces = new HashMap();
    HashMap<String, Integer> hmOrganization = new HashMap();
    HashMap<String, Integer> hmName = new HashMap();
    HashMap<String, Integer> hmSMD = new HashMap();
    HashMap<String, Integer> hmSpamword = new HashMap();
    HashMap<String, Integer> hmSpamProfile = new HashMap(); 
    HashMap<String, String> hmLoadTrainingArffFiles = new HashMap();
    HashMap<String, String> hmLoadTestingArffFiles = new HashMap();    
    int numberOfRecentTweets = 0;
    Date dtpFrom = null;
    Date dtpTo = null;
    int trainingData = 0;
    /**
     * Creates new form createNewSystem
     */
    public createNewSystem() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        rbNumberOfRecentTweets = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        rbGroupSelectSystems = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnDataset = new javax.swing.JButton();
        lblDataset = new javax.swing.JLabel();
        rbAT = new javax.swing.JRadioButton();
        rb150RT = new javax.swing.JRadioButton();
        rb100RT = new javax.swing.JRadioButton();
        rb50RT = new javax.swing.JRadioButton();
        rb20RT = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jdpFrom = new org.jdesktop.swingx.JXDatePicker();
        jdpTo = new org.jdesktop.swingx.JXDatePicker();
        btnLoadDictionary = new javax.swing.JButton();
        lblDictionary = new javax.swing.JLabel();
        btnLoadPlaces = new javax.swing.JButton();
        btnLoadOrganization = new javax.swing.JButton();
        btnLoadName = new javax.swing.JButton();
        btnLoadSMD = new javax.swing.JButton();
        btnLoadSpam = new javax.swing.JButton();
        btnUserInfo = new javax.swing.JButton();
        btnProfileStatus = new javax.swing.JButton();
        lblPlaces = new javax.swing.JLabel();
        lblSMD = new javax.swing.JLabel();
        lblProfile = new javax.swing.JLabel();
        lblOrganization = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblUserInfo = new javax.swing.JLabel();
        lblSpamwords = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtbContentBasedFeatures = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtbUserbasedfeatures = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        rbNewSystem = new javax.swing.JRadioButton();
        rbSystem1 = new javax.swing.JRadioButton();
        rbSystem2 = new javax.swing.JRadioButton();
        rbSystem3 = new javax.swing.JRadioButton();
        rbSystem4 = new javax.swing.JRadioButton();
        rbSystem5 = new javax.swing.JRadioButton();
        btnApplySystem = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnExtract = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnLoadArffFile = new javax.swing.JButton();
        lblArffFile = new javax.swing.JLabel();
        cbFeatureSelection = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taFeatureSelectionResults = new javax.swing.JTextArea();
        btnFSApply = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cbClassifiers = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        taClassifierResults = new javax.swing.JTextArea();
        btnClassify = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cbFalseNegative = new javax.swing.JCheckBox();
        cbFMeasure = new javax.swing.JCheckBox();
        cbRecall = new javax.swing.JCheckBox();
        cbTrueNegative = new javax.swing.JCheckBox();
        cbFalsePositive = new javax.swing.JCheckBox();
        cbPrecision = new javax.swing.JCheckBox();
        cbAccuracy = new javax.swing.JCheckBox();
        cbTruePositive = new javax.swing.JCheckBox();
        btnLoadArffFiles = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        lblClassifiers = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setPreferredSize(new java.awt.Dimension(545, 626));

        btnDataset.setText("Dataset");
        btnDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatasetActionPerformed(evt);
            }
        });

        lblDataset.setText("None");

        rbNumberOfRecentTweets.add(rbAT);
        rbAT.setText("All Tweets");
        rbAT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbATStateChanged(evt);
            }
        });

        rbNumberOfRecentTweets.add(rb150RT);
        rb150RT.setText("150 Recent Tweets");
        rb150RT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rb150RTStateChanged(evt);
            }
        });

        rbNumberOfRecentTweets.add(rb100RT);
        rb100RT.setText("100 Recent Tweets");
        rb100RT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rb100RTStateChanged(evt);
            }
        });

        rbNumberOfRecentTweets.add(rb50RT);
        rb50RT.setText("50 Recent Tweets");
        rb50RT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rb50RTStateChanged(evt);
            }
        });

        rbNumberOfRecentTweets.add(rb20RT);
        rb20RT.setText("20 Recent Tweets");
        rb20RT.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rb20RTStateChanged(evt);
            }
        });

        jLabel1.setText("From:");

        jLabel2.setText("To:");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnLoadDictionary.setText("Dictionary");
        btnLoadDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDictionaryActionPerformed(evt);
            }
        });

        lblDictionary.setText("None");

        btnLoadPlaces.setText("Places");
        btnLoadPlaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadPlacesActionPerformed(evt);
            }
        });

        btnLoadOrganization.setText("Organization");
        btnLoadOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadOrganizationActionPerformed(evt);
            }
        });

        btnLoadName.setText("Name");
        btnLoadName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadNameActionPerformed(evt);
            }
        });

        btnLoadSMD.setText("SMD");
        btnLoadSMD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSMDActionPerformed(evt);
            }
        });

        btnLoadSpam.setText("Spamwords");
        btnLoadSpam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSpamActionPerformed(evt);
            }
        });

        btnUserInfo.setText("User Info");
        btnUserInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserInfoActionPerformed(evt);
            }
        });

        btnProfileStatus.setText("Profile ");
        btnProfileStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileStatusActionPerformed(evt);
            }
        });

        lblPlaces.setText("None");

        lblSMD.setText("None");

        lblProfile.setText("None");

        lblOrganization.setText("None");

        lblName.setText("None");

        lblUserInfo.setText("None");

        lblSpamwords.setText("None");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnLoadName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnLoadPlaces, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDataset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblDataset))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPlaces)
                                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnLoadSMD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnUserInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnLoadDictionary, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblDictionary, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblSMD, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(lblUserInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnLoadOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnLoadSpam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnProfileStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSpamwords, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rb50RT)
                                    .addComponent(rbAT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rb20RT)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rb150RT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rb100RT))))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdpFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdpTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDataset)
                    .addComponent(lblDataset)
                    .addComponent(btnLoadDictionary)
                    .addComponent(lblDictionary)
                    .addComponent(btnProfileStatus)
                    .addComponent(lblProfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadPlaces)
                    .addComponent(lblPlaces)
                    .addComponent(btnLoadOrganization)
                    .addComponent(btnLoadSMD)
                    .addComponent(lblSMD)
                    .addComponent(lblOrganization))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadSpam)
                    .addComponent(btnUserInfo)
                    .addComponent(btnLoadName)
                    .addComponent(lblName)
                    .addComponent(lblUserInfo)
                    .addComponent(lblSpamwords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbAT)
                    .addComponent(rb150RT)
                    .addComponent(rb100RT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb50RT)
                    .addComponent(rb20RT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jdpFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jdpTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dataset", jPanel1);

        jLabel5.setText("Content-based features");

        jLabel6.setText("User-based features");

        jtbContentBasedFeatures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Number of Hashtags",  new Boolean(false),  new Boolean(false)},
                {"Number of Hashtags per word",  new Boolean(false),  new Boolean(false)},
                {"Number of Mentions",  new Boolean(false),  new Boolean(false)},
                {"Number of Mentions per word",  new Boolean(false),  new Boolean(false)},
                {"Number of URLs",  new Boolean(false),  new Boolean(false)},
                {"Number of URLs per word",  new Boolean(false),  new Boolean(false)},
                {"Number of words per tweet",  new Boolean(false),  new Boolean(false)},
                {"Whether the link points to a Social Media Domain",  new Boolean(false),  new Boolean(false)},
                {"Number of unique URLs",  new Boolean(false),  new Boolean(false)},
                {"Number of exclamation marks",  new Boolean(false),  new Boolean(false)},
                {"Number of question marks", null,  new Boolean(false)},
                {"Number of characters", null,  new Boolean(false)},
                {"Whether the tweet is a retweet", null,  new Boolean(false)},
                {"Number of Retweets", null,  new Boolean(false)},
                {"Number of consecutive words", null,  new Boolean(false)},
                {"Number of whitespaces per tweet", null,  new Boolean(false)},
                {"Number of capitalization words per tweet", null,  new Boolean(false)},
                {"Number of capitalization words per word on each tweet", null,  new Boolean(false)},
                {"Number of duplicated tweets", null,  new Boolean(false)},
                {"Percentage of words not found in a dictionary", null,  new Boolean(false)},
                {"Tweets contain places", null,  new Boolean(false)},
                {"Tweets contain Organization", null,  new Boolean(false)},
                {"Tweets contain name", null,  new Boolean(false)},
                {"Tweets contain Social Media Domain", null,  new Boolean(false)},
                {"Number of words", null,  new Boolean(false)},
                {"Number of spam words per tweet",  new Boolean(false),  new Boolean(false)},
                {"Number of spam words per word on each tweet",  new Boolean(false),  new Boolean(false)},
                {"Time of publication",  new Boolean(false),  new Boolean(false)}
            },
            new String [] {
                "Feature Name", "Extract", "Save the features"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtbContentBasedFeatures.setPreferredSize(new java.awt.Dimension(250, 500));
        jtbContentBasedFeatures.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbContentBasedFeaturesMouseClicked(evt);
            }
        });
        jtbContentBasedFeatures.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtbContentBasedFeaturesPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(jtbContentBasedFeatures);

        jtbUserbasedfeatures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Number of followers",  new Boolean(false)},
                {"Number of followees", null},
                {"Reputation", null},
                {"Ratio follower to following", null},
                {"Age of account", null},
                {"Bi-Directional Links Ratio", null},
                {"Interaction rate", null},
                {"Fraction of mention non follower", null},
                {"Average number of hashtags", null},
                {"Maximum number of hashtags", null},
                {"Maximum number of hashtags per word", null},
                {"Minimum number of hashtags", null},
                {"Minimum number of hashtags per word", null},
                {"Median number of hashtags", null},
                {"Median number of hashtags per word", null},
                {"Fraction of hashtags", null},
                {"Average number of mentions", null},
                {"Maximum number of mentions", null},
                {"Minimum number of mentions", null},
                {"Median number of mentions", null},
                {"Fraction of mentions", null},
                {"Average retweets", null},
                {"Total number of times user was mentioned", null},
                {"Maximum number of tweet retweets", null},
                {"Minimum number of tweet retweets", null},
                {"Median number of tweet retweets", null},
                {"Average number of URLs", null},
                {"Average number of URLs per word", null},
                {"Maximum number of URLs", null},
                {"Maximum number of URLs per word", null},
                {"Minimum number of URLs", null},
                {"Minimum number of URLs per word", null},
                {"Median number of URLs", null},
                {"Fraction of URLs", null},
                {"Median number of URLs per word", null},
                {"Ratio Unique URLs", null},
                {"URL rate", null},
                {"Number of spam words in screen name", null},
                {"Fraction of spam tweets", null},
                {"Length of profile name", null},
                {"Average spam tweet count", null},
                {"Number of tweets early morning", null},
                {"Maximum amount of time between tweets", null},
                {"Minimum amount of time between tweets", null},
                {"Average amount of time between tweets", null},
                {"Median amount of time between tweets", null},
                {"Standard deviation of time between tweets", null},
                {"Maximum number of characters", null},
                {"Minimum number of characters", null},
                {"Average number of characters", null},
                {"Median number of characters", null},
                {"Maximum number of words", null},
                {"Minimum number of words", null},
                {"Average number of words", null},
                {"Median number of words", null},
                {"Number of Duplicated tweets", null},
                {"Fraction of duplicated tweets", null},
                {"Maximum number of consecutive words", null},
                {"Length description", null},
                {"Number of tweets", null},
                {"Max idle duration between posts", null},
                {"Tweet similarity - Cosine similarity", null},
                {"Number of tweets posted at 12:00 am", null},
                {"Number of tweets posted at 01:00 am", null},
                {"Number of tweets posted at 02:00 am", null},
                {"Number of tweets posted at 03:00 am", null},
                {"Number of tweets posted at 04:00 am", null},
                {"Number of tweets posted at 05:00 am", null},
                {"Number of tweets posted at 06:00 am", null},
                {"Number of tweets posted at 07:00 am", null},
                {"Number of tweets posted at 08:00 am", null},
                {"Number of tweets posted at 09:00 am", null},
                {"Number of tweets posted at 10:00 am", null},
                {"Number of tweets posted at 11:00 am", null},
                {"Number of tweets posted at 12:00 pm", null},
                {"Number of tweets posted at 13:00 pm", null},
                {"Number of tweets posted at 14:00 pm", null},
                {"Number of tweets posted at 15:00 pm", null},
                {"Number of tweets posted at 16:00 pm", null},
                {"Number of tweets posted at 17:00 pm", null},
                {"Number of tweets posted at 18:00 pm", null},
                {"Number of tweets posted at 19:00 pm", null},
                {"Number of tweets posted at 20:00 pm", null},
                {"Number of tweets posted at 21:00 pm", null},
                {"Number of tweets posted at 22:00 pm", null},
                {"Number of tweets posted at 23:00 pm", null},
                {"Number of tweets posted from 12:00 am - 02:00 am", null},
                {"Number of tweets posted from 03:00 am - 05:00 am", null},
                {"Number of tweets posted from 06:00 am - 08:00 am", null},
                {"Number of tweets posted from 09:00 am - 11:00 am", null},
                {"Number of tweets posted from 12:00 pm - 14:00 pm", null},
                {"Number of tweets posted from 15:00 pm - 17:00 pm", null},
                {"Number of tweets posted from 18:00 pm - 20:00 pm", null},
                {"Number of tweets posted from 21:00 pm - 23:00 pm", null}
            },
            new String [] {
                "Feature Name", "Extract"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtbUserbasedfeatures.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbUserbasedfeaturesMouseClicked(evt);
            }
        });
        jtbUserbasedfeatures.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtbUserbasedfeaturesPropertyChange(evt);
            }
        });
        jScrollPane6.setViewportView(jtbUserbasedfeatures);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setText("Select a system");

        rbGroupSelectSystems.add(rbNewSystem);
        rbNewSystem.setText("New System");

        rbGroupSelectSystems.add(rbSystem1);
        rbSystem1.setText("System 1");

        rbGroupSelectSystems.add(rbSystem2);
        rbSystem2.setText("System 2");

        rbGroupSelectSystems.add(rbSystem3);
        rbSystem3.setText("System 3");

        rbGroupSelectSystems.add(rbSystem4);
        rbSystem4.setText("System 4");

        rbGroupSelectSystems.add(rbSystem5);
        rbSystem5.setText("System 5");

        btnApplySystem.setText("Apply");
        btnApplySystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplySystemActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnSavePropertyChange(evt);
            }
        });

        btnExtract.setText("Extract");
        btnExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbNewSystem)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnApplySystem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(49, 49, 49))
                    .addComponent(rbSystem3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(rbSystem1)
                        .addComponent(rbSystem4))
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(rbSystem2)
                        .addComponent(rbSystem5))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnExtract, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSystem1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rbSystem2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rbNewSystem))
                .addGap(7, 7, 7)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSystem3)
                    .addComponent(rbSystem4)
                    .addComponent(rbSystem5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApplySystem)
                    .addComponent(btnSave)
                    .addComponent(btnExtract)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(327, 327, 327))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane6)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Feature Extraction", jPanel2);

        btnLoadArffFile.setText("Load Arff file");
        btnLoadArffFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadArffFileActionPerformed(evt);
            }
        });

        lblArffFile.setText("No file");

        cbFeatureSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Wrapper", "InforGain", "RelieF", "CfsSubsetEval" }));
        cbFeatureSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFeatureSelectionActionPerformed(evt);
            }
        });

        jLabel7.setText("Feature Selection Algorithms:");

        taFeatureSelectionResults.setColumns(20);
        taFeatureSelectionResults.setRows(5);
        jScrollPane2.setViewportView(taFeatureSelectionResults);

        btnFSApply.setText("Apply");
        btnFSApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFSApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnLoadArffFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblArffFile, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cbFeatureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFSApply, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel7)))
                        .addGap(0, 211, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadArffFile)
                    .addComponent(lblArffFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFeatureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFSApply))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Feature Selection", jPanel3);

        jLabel8.setText("Classifier Algorithms");

        cbClassifiers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Naive Bayes", "Random Forest", "IBK", "J48", "SVM" }));

        taClassifierResults.setColumns(20);
        taClassifierResults.setRows(5);
        jScrollPane7.setViewportView(taClassifierResults);

        btnClassify.setText("Apply");
        btnClassify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClassifyActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setText("Evaluation Metrics");

        cbFalseNegative.setText("False Negative");

        cbFMeasure.setText("F-Measure");

        cbRecall.setText("Recall");

        cbTrueNegative.setText("True Negative");

        cbFalsePositive.setText("False Positive");

        cbPrecision.setText("Precision");

        cbAccuracy.setText("Accuracy");

        cbTruePositive.setText("True Positive");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbTruePositive)
                            .addComponent(cbAccuracy))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbPrecision)
                            .addComponent(cbFalsePositive))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbRecall)
                            .addComponent(cbTrueNegative))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFMeasure)
                            .addComponent(cbFalseNegative)))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAccuracy)
                    .addComponent(cbPrecision)
                    .addComponent(cbRecall)
                    .addComponent(cbFMeasure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTruePositive)
                    .addComponent(cbFalsePositive)
                    .addComponent(cbTrueNegative)
                    .addComponent(cbFalseNegative))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnLoadArffFiles.setText("Load Arff Files");
        btnLoadArffFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadArffFilesActionPerformed(evt);
            }
        });

        jLabel11.setText("Classification Results");

        lblClassifiers.setText("None");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cbClassifiers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadArffFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblClassifiers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClassify))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbClassifiers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoadArffFiles)
                    .addComponent(btnClassify)
                    .addComponent(lblClassifiers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Classification", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtbUserbasedfeaturesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbUserbasedfeaturesMouseClicked

        //Extract the "Maximum number of Hashtags"
        //Check if 'Number Of Hashtags' is selected and send a message if not.
        
        int rowMaxHashtags = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colMaxHashtags = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        
        if(rowMaxHashtags == 8 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(0, 1).toString();//return the value of index 0,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(0, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,8 , 1);
            }
        }
        if(rowMaxHashtags == 9 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(0, 1).toString();//return the value of index 0,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(0, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,9 , 1);
            }
        }
        if(rowMaxHashtags == 11 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(0, 1).toString();//return the value of index 0,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(0, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,11 , 1);
            }
        }
        if(rowMaxHashtags == 13 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(0, 1).toString();//return the value of index 0,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(0, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,13 , 1);
            }
        }
        if(rowMaxHashtags == 15 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(0, 1).toString();//return the value of index 0,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(0, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,15 , 1);
            }
        }
        // Hashtag Per Word
        if(rowMaxHashtags == 10 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(1, 1).toString();//return the value of index 1,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(1, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,10 , 1);
            }
        }
        if(rowMaxHashtags == 12 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(1, 1).toString();//return the value of index 1,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(1, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,12 , 1);
            }
        }
        if(rowMaxHashtags == 14 && colMaxHashtags == 1)
        {
            String numberOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(1, 1).toString();//return the value of index 1,1 from content-based table
            if(numberOfHashtags.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(1, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,14 , 1);
            }
        }
        //-------(*)__(*)-------***************-------(*)__(*)-------//

        //Extract the "Maxmimum number of Mentions"
        //Check if 'Number of Mentions' is selected and send a message if not.
        int rowMaxMentions = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colMaxMentions = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        if(rowMaxMentions == 16 && colMaxMentions == 1)
        {
            String numberOfMentions = jtbContentBasedFeatures.getModel().getValueAt(2, 1).toString();
            if(numberOfMentions.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(2, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,16 , 1);
            }
        }
        if(rowMaxMentions == 17 && colMaxMentions == 1)
        {
            String numberOfMentions = jtbContentBasedFeatures.getModel().getValueAt(2, 1).toString();
            if(numberOfMentions.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(2, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,17 , 1);
            }
        }
        if(rowMaxMentions == 18 && colMaxMentions == 1)
        {
            String numberOfMentions = jtbContentBasedFeatures.getModel().getValueAt(2, 1).toString();
            if(numberOfMentions.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(2, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,18 , 1);
            }
        }
        if(rowMaxMentions == 19 && colMaxMentions == 1)
        {
            String numberOfMentions = jtbContentBasedFeatures.getModel().getValueAt(2, 1).toString();
            if(numberOfMentions.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(2, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,19 , 1);
            }
        }
        if(rowMaxMentions == 20 && colMaxMentions == 1)
        {
            String numberOfMentions = jtbContentBasedFeatures.getModel().getValueAt(2, 1).toString();
            if(numberOfMentions.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(2, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,20 , 1);
            }
        }
        //-------(*)__(*)-------***************-------(*)__(*)-------//
        //URL
        int rowURL = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colURL = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        if(rowURL == 26 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(4, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,26 , 1);
            }
        }
        if(rowURL == 28 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(4, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,28 , 1);
            }
        }
        if(rowURL == 30 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(4, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,30 , 1);
            }
        }
        if(rowURL == 32 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(4, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,32 , 1);
            }
        }
        if(rowURL == 33 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(4, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,33 , 1);
            }
        }
        if(rowURL == 36 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(4, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,36 , 1);
            }
        }
        if(rowURL == 27 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(5, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(5, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,27 , 1);
            }
        }
        if(rowURL == 29 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(5, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(5, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,29 , 1);
            }
        }
        if(rowURL == 31 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(5, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(5, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,31 , 1);
            }
        }
        if(rowURL == 34 && colURL == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(5, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(5, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,34 , 1);
            }
        }
        //-------(*)__(*)-------***************-------(*)__(*)-------//
        //Number Of Word Per Tweet
        int rowNoOfWordPerTweet = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colNoOfWordPerTweet = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        if(rowNoOfWordPerTweet == 51 && colNoOfWordPerTweet == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(6, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,51 , 1);
            }
        }
        if(rowNoOfWordPerTweet == 52 && colNoOfWordPerTweet == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(6, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,52 , 1);
            }
        }
        if(rowNoOfWordPerTweet == 53 && colNoOfWordPerTweet == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(6, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,53 , 1);
            }
        }
        if(rowNoOfWordPerTweet == 54 && colNoOfWordPerTweet == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(6, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,54 , 1);
            }
        }
        if(rowNoOfWordPerTweet == 64 && colNoOfWordPerTweet == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(6, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,64 , 1);
            }
        }
        if(rowNoOfWordPerTweet == 65 && colNoOfWordPerTweet == 1)
        {
            String numberOfURL = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
            if(numberOfURL.equals("false"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(6, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,65 , 1);
            }
        }  
        //-------(*)__(*)-------***************-------(*)__(*)-------//
        //Number of unique URL
        int rowUniqueURL = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colUniqueURL = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        if(rowUniqueURL == 35 && colUniqueURL == 1)
        {
            String uniqueNumberOfURL = String.valueOf(jtbContentBasedFeatures.getValueAt(8, 1));
            if(uniqueNumberOfURL.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(8, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,35 , 1);
            }
        }
        //-------(*)__(*)-------***************-------(*)__(*)-------//
        //Number of character
        int rowNoOfCharacter = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colNoOfCharacter = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        if(rowNoOfCharacter == 47 && colNoOfCharacter == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(11, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(11, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,47 , 1);
            }
        }
        if(rowNoOfCharacter == 48 && colNoOfCharacter == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(11, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(11, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,48 , 1);
            }
        }
        if(rowNoOfCharacter == 49 && colNoOfCharacter == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(11, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(11, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,49 , 1);
            }
        }
        if(rowNoOfCharacter == 50 && colNoOfCharacter == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(11, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(11, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,50 , 1);
            }
        }
        //-------(*)__(*)-------***************-------(*)__(*)-------//
        //Number of Retweets
        int rowNoOfRetweets = jtbUserbasedfeatures.rowAtPoint(evt.getPoint());
        int colNoOfRetweets = jtbUserbasedfeatures.columnAtPoint(evt.getPoint());
        if(rowNoOfRetweets == 21 && colNoOfRetweets == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(13, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(13, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,21 , 1);
            }
        }
        if(rowNoOfRetweets == 23 && colNoOfRetweets == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(13, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(13, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,23 , 1);
            }
        }
        if(rowNoOfRetweets == 24 && colNoOfRetweets == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(13, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(13, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,24 , 1);
            }
        }
        if(rowNoOfRetweets == 25 && colNoOfRetweets == 1)
        {
            String numberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(13, 1));
            if(numberOfCharacter.equals("null"))
            {
                execution.dialogForMissingFeatures("This feature requires '"+ jtbContentBasedFeatures.getModel().getValueAt(13, 0) + "' to able for extract");
                jtbUserbasedfeatures.setValueAt(Boolean.FALSE,25 , 1);
            }
        }
    }//GEN-LAST:event_jtbUserbasedfeaturesMouseClicked

    private void rbATStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbATStateChanged

    }//GEN-LAST:event_rbATStateChanged

    private void btnDatasetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatasetActionPerformed
        // TODO add your handling code here:
        btnDataset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    //String xmlFilesPath = "/Users/Trung/Desktop/Train/";
                    File folder = new File(xmlFilesPath);
                    listofFiles = folder.listFiles();
                    try
                    {
                        //execution.featureExtraction(listofFiles);
                        lblDataset.setText("Loaded");
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                }
            }
        });
    }//GEN-LAST:event_btnDatasetActionPerformed

    private void jtbUserbasedfeaturesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtbUserbasedfeaturesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jtbUserbasedfeaturesPropertyChange

    private void jtbContentBasedFeaturesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtbContentBasedFeaturesPropertyChange
        //unselect MaximumNumberOfHashtags when unselect NumberOfHashtags
        String unselectMaxNoOfHashtags = jtbContentBasedFeatures.getModel().getValueAt(0, 1).toString();
        if(unselectMaxNoOfHashtags.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 8, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 9, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 11, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 13, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 15, 1);
        }
        //Hashtag per word
        String unselectMaxNoOfHashtagsPerWord = jtbContentBasedFeatures.getModel().getValueAt(1, 1).toString();
        if(unselectMaxNoOfHashtagsPerWord.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 10, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 12, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 14, 1);
        }
        //this part is for Mentions
        String unselectMaxNoOfMentions = jtbContentBasedFeatures.getModel().getValueAt(2, 1).toString();
        if(unselectMaxNoOfMentions.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 16, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 17, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 18, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 19, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 20, 1);
        }
        //URL
        String unselectURL = jtbContentBasedFeatures.getModel().getValueAt(4, 1).toString();
        if(unselectURL.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 26, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 28, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 30, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 32, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 33, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 36, 1);
        }
        //URL Per Word
        String unselectURLPerWord = jtbContentBasedFeatures.getModel().getValueAt(5, 1).toString();
        if(unselectURLPerWord.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 27, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 29, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 31, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 34, 1);
        }
        //Word per tweet
        String unselectNumberOfWordPerTweet = jtbContentBasedFeatures.getModel().getValueAt(6, 1).toString();
        if(unselectNumberOfWordPerTweet.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 51, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 52, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 53, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 54, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 64, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 65, 1);
        }
        //Unique URL
        String unselectNumberOfUniqueURL = String.valueOf(jtbContentBasedFeatures.getValueAt(8, 1));
        //System.out.println(String.valueOf(jtbContentBasedFeatures.getValueAt(6, 1)));
        if(unselectNumberOfUniqueURL.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 35, 1);
        }
        //Character
        String unselectNumberOfCharacter = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(11, 1));
        if(unselectNumberOfCharacter.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 47, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 48, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 49, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 50, 1);
        }
        //Retweets
        String unselectNumberOfRetweets = String.valueOf(jtbContentBasedFeatures.getModel().getValueAt(13, 1));
        if(unselectNumberOfRetweets.equals("false"))
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 21, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 23, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 24, 1);
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, 25, 1);
        }
    }//GEN-LAST:event_jtbContentBasedFeaturesPropertyChange

    private void jtbContentBasedFeaturesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbContentBasedFeaturesMouseClicked

    }//GEN-LAST:event_jtbContentBasedFeaturesMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        featureNamesInContentBased.clear();
        featureNamesInUserBased.clear();
        for(int i = 0; i < jtbContentBasedFeatures.getRowCount(); i++)
        {
            if(String.valueOf(jtbContentBasedFeatures.getValueAt(i, 2)).equals("true"))
            {
                String nameOfFeature = jtbContentBasedFeatures.getModel().getValueAt(i, 0).toString();
                featureNamesInContentBased.add(nameOfFeature);
            }
        }
        //add the features have been ticked from userbased table 1
        for(int i = 0; i < jtbUserbasedfeatures.getRowCount(); i++)
        {
            if(String.valueOf(jtbUserbasedfeatures.getValueAt(i, 1)).equals("true"))
            {
                String nameOfFeature = jtbUserbasedfeatures.getModel().getValueAt(i, 0).toString();
                featureNamesInUserBased.add(nameOfFeature);
            }
        }
        System.out.println("Size user based features: "+featureNamesInUserBased.size());
                
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSavePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnSavePropertyChange
        // TODO add your handling code here:
       
    }//GEN-LAST:event_btnSavePropertyChange

    private void rb150RTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rb150RTStateChanged

    }//GEN-LAST:event_rb150RTStateChanged

    private void rb100RTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rb100RTStateChanged
        // TODO add your handling code here:
        //numberOfRecentTweets = 100;
        //System.out.println(numberOfRecentTweets);
    }//GEN-LAST:event_rb100RTStateChanged

    private void rb50RTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rb50RTStateChanged
        // TODO add your handling code here:
//        numberOfRecentTweets = 50;
//        System.out.println(numberOfRecentTweets);
    }//GEN-LAST:event_rb50RTStateChanged

    private void rb20RTStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rb20RTStateChanged
        // TODO add your handling code here:
//        numberOfRecentTweets = 20;
//        System.out.println(numberOfRecentTweets);
    }//GEN-LAST:event_rb20RTStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(rbAT.isSelected())
            numberOfRecentTweets = 200;
        else if(rb150RT.isSelected())
            numberOfRecentTweets = 150;
        else if(rb100RT.isSelected())
            numberOfRecentTweets = 100;
        else if(rb50RT.isSelected())
            numberOfRecentTweets = 50;
        else if (rb20RT.isSelected())
            numberOfRecentTweets = 20;
        
        dtpFrom = jdpFrom.getDate();
        dtpTo = jdpTo.getDate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractActionPerformed
        execution.extractFeature(featureNamesInContentBased, featureNamesInUserBased, numberOfRecentTweets, listofFiles, jtbContentBasedFeatures,jtbUserbasedfeatures, hm, hmSMD, hmPlaces, hmName, hmSpamword, hmSpamProfile, dtpFrom, dtpTo, _biFriends, biFriendsFiles, spamword);
        try {
            execution.createArffFile(featureNamesInContentBased, featureNamesInUserBased, execution.getPathArffFile());
        } catch (IOException ex) {
            Logger.getLogger(createNewSystem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExtractActionPerformed

    private void btnLoadDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDictionaryActionPerformed
        // TODO add your handling code here:
        btnLoadDictionary.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    //String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    String xmlFilesPath = "/Users/Trung/Desktop/dataset/dictionary.csv";                    
                    try
                    {
                        //execution.featureExtraction(listofFiles);
                        lblDictionary.setText("Successful");
                        dictionary = xmlFilesPath;
                        hm.clear();
                        Scanner wordInDictionary = new Scanner(new File(dictionary));
                        while(wordInDictionary.hasNext())
                        {
                            hm.put(wordInDictionary.next(), 0);
                        }
                        wordInDictionary.close();
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblDictionary.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadDictionaryActionPerformed

    private void btnLoadOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadOrganizationActionPerformed
        // TODO add your handling code here:
        btnLoadOrganization.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    //String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    String xmlFilesPath = "/Users/Trung/Desktop/dataset/Organizations.csv";                      
                    try
                    {
                        organization = xmlFilesPath;
                        hmOrganization.clear();
                        Scanner aOrganization = new Scanner(new File(organization));
                        while(aOrganization.hasNext())
                        {
                            hmOrganization.put(aOrganization.next(), 0);
                        }
                        aOrganization.close();
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblOrganization.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadOrganizationActionPerformed

    private void btnLoadPlacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadPlacesActionPerformed
        // TODO add your handling code here:
        btnLoadPlaces.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    //String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    String xmlFilesPath = "/Users/Trung/Desktop/dataset/world-cities.csv";
                    try
                    {
                        places = xmlFilesPath;
                        hmPlaces.clear();
                        Scanner aPlaces = new Scanner(new File(places));
                        while(aPlaces.hasNext())
                        {
                            hmPlaces.put(aPlaces.next(), 0);
                        }
                        aPlaces.close();
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblPlaces.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadPlacesActionPerformed

    private void btnLoadSMDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSMDActionPerformed
        // TODO add your handling code here:
        btnLoadSMD.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    //String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    String xmlFilesPath = "/Users/Trung/Desktop/dataset/socialmediadomain.csv";                     
                    try
                    {
                        smd = xmlFilesPath;
                        hmSMD.clear();
                        Scanner aSMD = new Scanner(new File(smd));
                        while(aSMD.hasNext())
                        {
                            hmSMD.put(aSMD.next(), 0);
                        }
                        aSMD.close();
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblSMD.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadSMDActionPerformed

    private void btnLoadSpamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSpamActionPerformed
        btnLoadSpam.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    //String xmlFilesPath = "/Users/Trung/Desktop/dataset/spamwords.csv";                      
                    try
                    {
                        spamword = xmlFilesPath;
                        hmSpamword.clear();
                        try (Scanner aSpamword = new Scanner(new File(spamword))) {
                            while(aSpamword.hasNext())
                            {
                                hmSpamword.put(aSpamword.next(), 0);
                            }
                        }
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblSpamwords.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadSpamActionPerformed

    private void btnLoadNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadNameActionPerformed
        btnLoadName.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    //String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    String xmlFilesPath = "/Users/Trung/Desktop/dataset/name.csv";
                    try
                    {
                        name = xmlFilesPath;
                        hmName.clear();
                        Scanner aName = new Scanner(new File(name));
                        while(aName.hasNext())
                        {
                            hmName.put(aName.next(), 0);
                        }
                        aName.close();
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblName.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadNameActionPerformed

    private void btnUserInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserInfoActionPerformed

        btnUserInfo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    biFriendsFiles = openFile.getSelectedFile().getAbsolutePath();
                    //biFriendsFiles =   "/Users/Trung/Desktop/WEST/BiFriends/";
                    File xmlFileBiFriends = new File(biFriendsFiles);
                    _biFriends = xmlFileBiFriends.listFiles();
                }
                lblUserInfo.setText("Loaded");
            }
        });
    }//GEN-LAST:event_btnUserInfoActionPerformed

    private void btnProfileStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileStatusActionPerformed
        // TODO add your handling code here:
        btnProfileStatus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String spamProfile = "";
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    //String xmlFilesPath = openFile.getSelectedFile().getAbsolutePath();
                    String xmlFilesPath = "/Users/Trung/Desktop/dataset/Spam Users.csv";                       
                    try
                    {
                        spamProfile = xmlFilesPath;
//                        hmSpamProfile.clear();
                        Scanner aSpamProfile = new Scanner(new File(spamProfile));
                        while(aSpamProfile.hasNext())
                        {
                            hmSpamProfile.put(aSpamProfile.next(),0);
                        }
                        aSpamProfile.close();
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblProfile.setText("Loaded");
                }
            }
        });
        
    }//GEN-LAST:event_btnProfileStatusActionPerformed

    private void btnApplySystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplySystemActionPerformed

        clearTable();
        for (Enumeration<AbstractButton> buttons = rbGroupSelectSystems.getElements(); buttons.hasMoreElements();) 
        {
            AbstractButton button = buttons.nextElement();
            if(button.getText().equals("New System") && button.isSelected())
            {
                for(int i = 0; i < jtbContentBasedFeatures.getRowCount(); i++)
                {
                    jtbContentBasedFeatures.setValueAt(Boolean.TRUE, i, 1);
                    jtbContentBasedFeatures.setValueAt(Boolean.TRUE, i, 2);
                }
                for(int i = 0; i < jtbUserbasedfeatures.getRowCount(); i++)
                {
                    jtbUserbasedfeatures.setValueAt(Boolean.TRUE, i, 1);
                }
            }
            else if (button.getText().equals("System 1") && button.isSelected())
                autoSetupFeatures(system1);              
            else if(button.getText().equals("System 2") && button.isSelected())
                autoSetupFeatures(system2);
            else if(button.getText().equals("System 3") && button.isSelected())
                autoSetupFeatures(system3); 
            else if(button.getText().equals("System 4") && button.isSelected())
                autoSetupFeatures(system4);
            else if(button.getText().equals("System 5") && button.isSelected())
                autoSetupFeatures(system5);             
        }       
    }//GEN-LAST:event_btnApplySystemActionPerformed

    private void btnFSApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFSApplyActionPerformed
        btnFSApply.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newline = System.getProperty("line.separator");
                btnFSApply.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try
                        {
                            //System.out.println("Path ARFF: " +execution.getPathArffFile());
                            taFeatureSelectionResults.setText(execution.featureSelection(fFeatureSelectionPath,cbFeatureSelection.getSelectedItem().toString()) + newline);
                        }
                        catch (Exception ex) {
                            Logger.getLogger(createNewSystem.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
        });

    }//GEN-LAST:event_btnFSApplyActionPerformed

    private void cbFeatureSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFeatureSelectionActionPerformed

    }//GEN-LAST:event_cbFeatureSelectionActionPerformed

    private void btnLoadArffFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadArffFileActionPerformed
        // TODO add your handling code here:
        btnLoadArffFile.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    String file = openFile.getSelectedFile().getAbsolutePath();
                    fFeatureSelectionPath = file;
                }
                lblArffFile.setText("Loaded");
            }
        });
    }//GEN-LAST:event_btnLoadArffFileActionPerformed

    private void btnLoadArffFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadArffFilesActionPerformed
        btnLoadArffFiles.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser openFile = new JFileChooser();
                openFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                openFile.setMultiSelectionEnabled(true);
                int returnFile = openFile.showOpenDialog(createNewSystem.this);
                if(returnFile == JFileChooser.APPROVE_OPTION)
                {
                    File[] files = openFile.getSelectedFiles();
                    try
                    {
                        for(File file : files)
                        {

                            if(file.getName().contains("Training"))
                            {
                                String fileName = file.getName().replace("Training", "").replace(".arff", "");
                                hmLoadTrainingArffFiles.put(file.getCanonicalPath(), fileName);
                            }
                            if(file.getName().contains("Testing"))
                            {
                                String fileName = file.getName().replace("Testing", "").replace(".arff", "");
                                hmLoadTestingArffFiles.put(file.getCanonicalPath(),fileName);
                            }
                        }
                    }
                    catch(Exception a)
                    {
                        a.printStackTrace();
                    }
                    lblClassifiers.setText("Loaded");
                }
            }
        });
    }//GEN-LAST:event_btnLoadArffFilesActionPerformed

    private void btnClassifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClassifyActionPerformed
        btnClassify.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                taClassifierResults.removeAll();
                try
                {
                    String algorithm = cbClassifiers.getSelectedItem().toString();
                    if(cbAccuracy.isSelected())
                    evaluationMetric.add("Accuracy");
                    if(cbPrecision.isSelected())
                    evaluationMetric.add("Precision");
                    if(cbRecall.isSelected())
                    evaluationMetric.add("Recall");
                    if(cbFMeasure.isSelected())
                    evaluationMetric.add("FMeasure");
                    if(cbTruePositive.isSelected())
                    evaluationMetric.add("TruePositive");
                    if(cbTrueNegative.isSelected())
                    evaluationMetric.add("TrueNegative");
                    if(cbFalsePositive.isSelected())
                    evaluationMetric.add("FalsePositive");
                    if(cbFalseNegative.isSelected())
                    evaluationMetric.add("FalseNegative");
                    //taClassifierResults.setText(execution.classification("/Users/Trung/Desktop/training.arff", "/Users/Trung/Desktop/test.arff", cbClassifiers.getSelectedItem().toString()));
                    taClassifierResults.setText(execution.classification(hmLoadTrainingArffFiles,hmLoadTestingArffFiles,algorithm,evaluationMetric));
                } catch (Exception ex) {
                    Logger.getLogger(createNewSystem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_btnClassifyActionPerformed

    public void setUpFeaturesForSystems()
    {
        for(int i = 0; i < jtbContentBasedFeatures.getModel().getRowCount();i++)
        {
        }
        //System 1
        system1.put("Number of Hashtags",0);
        system1.put("Number of Mentions",2);
        system1.put("Number of URLs",4);
        system1.put("Number of followers",0);
        system1.put("Number of followers",1);
        system1.put("Maximum number of hashtags",0);
        system1.put("Maximum number of mentions",0);        
        //System 2
        system2.put("Number of Mentions", 2);
        system2.put("Number of URLs", 0);   
        system2.put("Number of URLs per word", 0); 
        system2.put("Number of URLs per tweet", 0);         
        system2.put("Number of followers", 0);
        system2.put("Age of account", 0);  
        system2.put("Interaction rate", 0); 
        system2.put("Maximum amount of time between tweets", 0);         
      
        //System 3
        system3.put("Number of URLs", 4);
        system3.put("Number of words per tweet", 11);        
        system3.put("Number of characters", 11);
        system3.put("Maximum number of words", 11);
        system3.put("Average number of characters", 11);        
        //System 4
        system4.put("Number ofspamwords per tweet", 9); 
        system4.put("Time of publication", 9);         
        system4.put("Number of exclamation marks", 9);
        system4.put("Number of question marks", 10);
        system4.put("Tweet similarity - Cosine similarity", 10);        
        //System 5
        system5.put("Number of Hashtags", 0);
        system5.put("Percentage of words not found in a dictionary", 0);        
        system5.put("Number of Hashtags per word", 1);
        system5.put("Maximum number of Hashtags", 0);        
        system5.put("Number of tweets early morning", 1);
    }
    public void autoSetupFeatures(HashMap<String, Integer> system)
    {
        for(int i = 0; i < jtbContentBasedFeatures.getModel().getRowCount();i++)
        {
            String valueKey = (String) jtbContentBasedFeatures.getModel().getValueAt(i, 0);
            if(system.containsKey(valueKey))
            {
                jtbContentBasedFeatures.setValueAt(Boolean.TRUE, i, 1);
                jtbContentBasedFeatures.setValueAt(Boolean.TRUE, i, 2);
            }
        }
        for(int i = 0; i < jtbUserbasedfeatures.getModel().getRowCount();i++)
        {
            String valueKey = (String) jtbUserbasedfeatures.getModel().getValueAt(i, 0);
            if(system.containsKey(valueKey))
            {
                jtbUserbasedfeatures.setValueAt(Boolean.TRUE, i, 1);
            }
        }
    }
    public void clearTable()
    {
        for(int i = 0; i < jtbContentBasedFeatures.getModel().getRowCount();i++)
        {
            jtbContentBasedFeatures.setValueAt(Boolean.FALSE, i, 1);
            jtbContentBasedFeatures.setValueAt(Boolean.FALSE, i, 2);                
        } 
        for(int i = 0; i < jtbUserbasedfeatures.getModel().getRowCount();i++)
        {
            jtbUserbasedfeatures.setValueAt(Boolean.FALSE, i, 1);
        }        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(createNewSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(createNewSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(createNewSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createNewSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createNewSystem().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplySystem;
    private javax.swing.JButton btnClassify;
    private javax.swing.JButton btnDataset;
    private javax.swing.JButton btnExtract;
    private javax.swing.JButton btnFSApply;
    private javax.swing.JButton btnLoadArffFile;
    private javax.swing.JButton btnLoadArffFiles;
    private javax.swing.JButton btnLoadDictionary;
    private javax.swing.JButton btnLoadName;
    private javax.swing.JButton btnLoadOrganization;
    private javax.swing.JButton btnLoadPlaces;
    private javax.swing.JButton btnLoadSMD;
    private javax.swing.JButton btnLoadSpam;
    private javax.swing.JButton btnProfileStatus;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUserInfo;
    private javax.swing.JCheckBox cbAccuracy;
    private javax.swing.JComboBox<String> cbClassifiers;
    private javax.swing.JCheckBox cbFMeasure;
    private javax.swing.JCheckBox cbFalseNegative;
    private javax.swing.JCheckBox cbFalsePositive;
    private javax.swing.JComboBox<String> cbFeatureSelection;
    private javax.swing.JCheckBox cbPrecision;
    private javax.swing.JCheckBox cbRecall;
    private javax.swing.JCheckBox cbTrueNegative;
    private javax.swing.JCheckBox cbTruePositive;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private org.jdesktop.swingx.JXDatePicker jdpFrom;
    private org.jdesktop.swingx.JXDatePicker jdpTo;
    private javax.swing.JTable jtbContentBasedFeatures;
    private javax.swing.JTable jtbUserbasedfeatures;
    private javax.swing.JLabel lblArffFile;
    private javax.swing.JLabel lblClassifiers;
    private javax.swing.JLabel lblDataset;
    private javax.swing.JLabel lblDictionary;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblOrganization;
    private javax.swing.JLabel lblPlaces;
    private javax.swing.JLabel lblProfile;
    private javax.swing.JLabel lblSMD;
    private javax.swing.JLabel lblSpamwords;
    private javax.swing.JLabel lblUserInfo;
    private javax.swing.JRadioButton rb100RT;
    private javax.swing.JRadioButton rb150RT;
    private javax.swing.JRadioButton rb20RT;
    private javax.swing.JRadioButton rb50RT;
    private javax.swing.JRadioButton rbAT;
    private javax.swing.ButtonGroup rbGroupSelectSystems;
    private javax.swing.JRadioButton rbNewSystem;
    private javax.swing.ButtonGroup rbNumberOfRecentTweets;
    private javax.swing.JRadioButton rbSystem1;
    private javax.swing.JRadioButton rbSystem2;
    private javax.swing.JRadioButton rbSystem3;
    private javax.swing.JRadioButton rbSystem4;
    private javax.swing.JRadioButton rbSystem5;
    private javax.swing.JTextArea taClassifierResults;
    private javax.swing.JTextArea taFeatureSelectionResults;
    // End of variables declaration//GEN-END:variables
}
